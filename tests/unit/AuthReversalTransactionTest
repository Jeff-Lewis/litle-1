<?php

use Petflow\Litle\Transaction\AuthReversalTransaction as AuthReversalTransaction;
use Petflow\Litle\Exception;

/**
 * Testing Auth Reversal Transactions
 */
class AuthReversalTransactionTest extends UnitTestCase {

	/**
	 * Successful auth reversal
	 */
	public function testSuccessfulAuthReversal() {
		$transaction = static::transactions()['01-approved'];

		$litleOnlineRequest = Mockery::mock('litleOnlineRequest')
			->shouldReceive('authReversalRequest')
			->andReturn($transaction['response'])
			->once()
			->mock();

		$result = (new AuthReversalTransaction([], [], $litleOnlineRequest))->make($transaction['request']);

		$this->assertEquals('472743', $result['litle_transaction_id']);
		$this->assertEquals('10010', $result['order_id']);
		$this->assertEquals('approved', $result['transaction_response']['type']);
	}

	/**
	 * Failed auth reversal due to missing txn id
	 *
	 * @expectedException Petflow\Litle\Exception\MissingRequestParameterException
	 */
	public function testFailedAuthReversalMissingTxnId() {
		$result = (new AuthReversalTransaction([], [], Mockery::mock('litleOnlineRequest')))->make([]);
	}

	/**
	 * Failed Auth Reversal due to missing order id
	 *
	 * @expectedException Petflow\Litle\Exception\MissingRequestParameterException
	 */
	public function testFailedAuthReversalMissingOrderId() {
		$result = (new AuthReversalTransaction([], [], Mockery::mock('litleOnlineRequest')))->make([
			'txnId' => 252
		]);
	}

	/**
	 * Transactions Used in this Test
	 */
	private static function transactions() {
		return [
			'01-approved' => [
				'request' => [
					'txnId' => 472743,
					'orderId' => 10010
				],
				'response' => static::makeAuthReversalXMLResponse([], [
					'litleTxnId' => '472743',
					'orderId' => '10010',
					'response' => '000',
					'message' => 'Approved'
				])
 			]
		];
	}
}